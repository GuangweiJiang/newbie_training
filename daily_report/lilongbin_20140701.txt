Today I start to programming a simple char device driver named chardrv.c. The file_operations methods are the most important part of the driver. I add some file_operatons methods such as open, release, read, write, lseek, and ioctl.
The read method is used to retrieve data from the device. A null pointer in this position in a file causes the read system call to fail with -EINVAL. A nonnegative value return value represents the number of bytes successfully read. If the value is positive, but smaller than count, only part of the data has been transfered.
The write metho is used to send data to the device. If NULL, -EINVAL if returned to the program calling the write system call. The return value, if nonnegative, represents the number of bytes successfully written.
The ioctl system call offers a way to issue device-special commands(such as formatting a track of a floppy disk, which is neither reading nor writing). If the device dosen't provide an ioctl method, the system call returns an error for any request that isn't predefined (-ENOTTY, "No such ioctl for device").
I add SCULL_READ function and SCULL_WRITE function to the ioctl method. At first, I defined the two functions as 0x01 and 0x02, then I write a user test function to call the SCULL_WRITE function, and it always couldn't call the ioctl function but return "successfully". This question troubles me for a long time. Then I find that if simply defining the macros as 0x01, 0x02 and etc. may lead to different devices may have the conflict order number. 
