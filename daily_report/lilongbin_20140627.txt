I learned the initialization and cleanup function of the kernel module programming and module parameters. Then I start to learn how to write a complete char device driver.
Char devices are accessed through names in the filesystem, they are conventionally located in the /dev directory. Traditionally, the major number identifies the driver associated with the device. The minor number is used by the kernel to determinate exactly which device is being referred to. Either way, the kernel itself knows almost nothing about minor numbers beyond the fact that they refer to devices implemented by your driver.
Within the kernel, the dev_t type (defined in <linux/types.h>) is used to hold device numbers--both the major and minor parts. As of version 2.6.0 of the kernel, dev_t is a 32 bit quantity with 12 bit set aside for the major number and 20 for the minor number. If, instead, you have the major and minor numbers and need to turn them into a dev_t, use: MKDEV(int major, int minor);
One of the first thing our driver will need to do when setting up a char device is to obtain one or more device numbers to work with. The necessary function for this task is register_chrdev_region, which is declared in <linux/fs.h>, or alloc_chrdev_region, by using which the kernel will happily allocate a major number for us on the fly.
Once our driver is more widely deployed, a randomly picked major number will lead to conflicts and trouble. Thus for new drivers, our drivers should almost certainly be using alloc_chrdev_region rather than register_chrdev_region.
We should free them when they are no longer in use with unregister_chrdev_region. The usual place to call unregister_chrdev_region would be in our module's cleanup function.
The best way to assign major numbers, in our opinion, is by defaulting to dynamic allocation while leaving ourself the option of specifying the major number at loadtime, or even at compile time.
